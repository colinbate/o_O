{"tagline":"O_o: HTML binding for teh lulz","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Funnyface.js","body":"```\r\n                         ,ad8888ba,            \r\n                        d8\"'    `\"8b           \r\n                       d8'        `8b     \r\n  ,adPPYba,            88          88          \r\n a8\"     \"8a           88          88     \r\n 8b       d8           Y8,        ,8P          \r\n \"8a,   ,a8\"            Y8a.    .a8P           \r\n  `\"YbbdP\"'              `\"Y8888Y\"'            \r\n\r\n            888888888888                       \r\n```            \r\n\r\n# Funnyface.js\r\n## HTML binding for teh lulz\r\n\r\n* Elegantly binds objects to HTML\r\n* Proxies through jQuery, Ender, or whatever $ is\r\n* Automatic dependency resolution\r\n* Plays well with others\r\n\r\n\r\n## Examples\r\n\r\n* [Basic Overview](http://weepy.github.com/o_O/examples/guide/index.html)\r\n* [TodoMVC Example](http://weepy.github.com/o_O/examples/todos/index.html)\r\n\r\n## The Basics\r\n\r\n# o_O properties\r\n\r\nUse `o_O(...)` to create an evented o_O `property`:\r\n\r\n```javascript\r\n\r\nname = o_O('Homer Simpson')\r\n\r\n// read a value\r\nname() // => 'Homer Simpson'\r\n\r\n// write a value\r\nname('Bart Simpson')\r\n```\r\n\r\no_O properties are evented, so it's possible to bind to a change event: \r\n\r\n```\r\nname.change(function(new_name, old_name) {\r\n  console.log('my name changed from', old_name, 'to', new_name)\r\n})\r\n```\r\n\r\n# Computed properties\r\n\r\no_O can also create computed properties:\r\n\r\n```javascript\r\nfirstName = o_O('Homer')\r\nsurName = o_O('Simpson')\r\nfullName = function() {\r\n  return firstName() + ' ' + surName()\r\n}\r\n\r\nfullName() // => 'Homer Simpson'\r\n```\r\n\r\nA computed property automatically determines it's dependencies and is recalculated whenever a dependency changes:\r\n\r\n```javascript\r\nfirstName('Bart')\r\n\r\nfullName() // => 'Bart Simpson'\r\n```\r\n\r\n# HTML binding with o_O.bind\r\n\r\nBind an object to a section of HTML with the `o_O.bind(...)` method, and bind parts of that HTML section to o_O `properties` with the `data-bind` attribute:\r\n\r\n```javascript\r\nperson = {\r\n  firstName: o_O('Michael'),\r\n  surName: o_O('Jackson'),\r\n  fullName: function() {\r\n    return person.firstName() + ' ' + person.surName()\r\n  },\r\n  age: o_O(50)\r\n}\r\no_O.bind(person, '#person');\r\n```\r\n```html\r\n<div id=\"#person\">\r\n  <div data-bind=\"text: fullName()\"></div>\r\n  <div data-bind=\"text: age()\"></div>\r\n</div>\r\n```\r\n\r\nThis will render the HTML and retrigger the bindings whenever a dependency changes. So e.g calling `person.firstName('Miss')` will update the HTML.\r\n\r\nThe binding names are associated with jQuery (or whatever $ is), so css will call $.fn.css. There are also some custom bindings: \r\n\r\n* `foreach` : renders the innerHTML for a list of items\r\n* `value` : two-way binding for forms\r\n* `visible` : hides an element if falsey\r\n* `if/unless` : removes/shows the inner HTML\r\n* `with` : rebinds the context (similar to javascript `with`)\r\n* `options`: options for a select\r\n* `log`: outputs to console.log\r\n* `call`: general purpose\r\n\r\nEvent handlers will also work, e.g. `click: handleClick`.\r\n\r\nNB if there's no corresponding binding found, it will simply update the attribute on the element; this is especially useful for attributes such as id, class, src, href\r\n\r\n## Digging Deeper\r\n\r\nBesides creating basic javascript objects containing o_O `properties`, you can also create an o_O `model` (using `o_O.model(...)`) that creates o_O `properties` for you out of the box as well as giving you access to event aggregation:\r\n\r\n```javascript\r\nvar homer = o_O.model({\r\n  name: 'Homer Simpson',\r\n  age: 40\r\n});\r\n\r\nhomer.on('set:name', function(character, name_new, name_old){\r\n  console.log(\"Homer's name changed.\");\r\n});\r\n```\r\n\r\nYou can also create an o_O evented `array` that lets you create an array of items (can be anything) and if the items support it (i.e. they are o_O `models`) aggregates events across all of them:\r\n\r\n```javascript\r\nvar cast = o_O.array();\r\n\r\ncast.push(o_O.model({name: 'Homer', age: 40}));\r\ncast.push(o_O.model({name: 'Marge', age: 36}));\r\ncast.push(o_O.model({name: 'Bart', age: 10}));\r\ncast.push(o_O.model({name: 'Lisa', age: 8}));\r\ncast.push(o_O.model({name: 'Maggie', age: 2}));\r\n\r\ncast.on('set:age', function(character, age_new, age_old){\r\n  console.log(character.name + \"'s age changed from \" + age_old + \" to \" + age_new + \".\");\r\n});\r\n\r\n// this will trigger the above 'set:' event for each character:\r\ncast.forEach(function(character){\r\n  character.age(character.age() + 1);\r\n});\r\n\r\ncast.on('add', function(new_character){\r\n  console.log(new_character);\r\n});\r\n\r\n// this will trigger the above 'add' event:\r\ncast.push(new Character({name: 'Mr. Burns', age: 99}));\r\n```\r\n\r\nThe special `foreach` binding will render this list: \r\n\r\n```html\r\n<ul id=\"#cast\" data-bind='foreach: cast'>\r\n  <li data-bind=\"text: fullName() +',' + age()\" ></li>\r\n</ul>\r\n\r\n<script>\r\no_O.bind(cast, '#cast')\r\n</script>\r\n```\r\n\r\n## Running Tests\r\n\r\nMake sure you have installed o_O's development dependencies via npm:\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\nA subset of tests can be run via the console:\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\nOr, if you have mocha install (`npm install -g mocha`) you can just run:\r\n\r\n```bash\r\nmocha\r\n```\r\n\r\nOther tests (that rely on the browser's DOM) must be run in the browser:\r\n\r\n```bash\r\nopen test/mocha.html\r\n```\r\n\r\n## Browser Compatability\r\n\r\nTested in:\r\n\r\n* Chrome 16-18\r\n* Firefox 4-10\r\n* Internet Explorer 7-9 \r\n* Safari 5\r\n\r\nOther browsers should work, (eg IE6) but are currently untested\r\n\r\n\r\n## Contributers\r\n\r\n* Jonah Fox aka weepy\r\n* Troy Goode\r\n\r\n## License\r\n\r\no_O is released under the [MIT license](http://www.opensource.org/licenses/mit-license.html):\r\n\r\n```\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2012 Jonah Fox <jonahfox@gmail.com> (https://github.com/weepy)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\r\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\r\nSoftware.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\r\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n```\r\n"}